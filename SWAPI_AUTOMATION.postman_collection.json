{
	"info": {
		"_postman_id": "b15cb5d8-cfb1-4c8c-b141-3326654d0094",
		"name": "SWAPI_AUTOMATION",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Register new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b1817f5e-8c72-462a-aa02-b6b9a2d71664",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"postman.getGlobalVariable(\"userTokenBestRate\")",
							"",
							"pm.test(\"Validate that registration status is success\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"Validate the automatically created email address\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.result.user.email).to.eql(pm.environment.get(\"emailAddress\"));",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "1c8f68dc-e8e8-4bbf-aa4d-bb374deeee9b",
						"exec": [
							"var random = Math.random().toString(36).substring(2);",
							"var emailAddress = \"ljubisha\" + random + \"@mailinator.com\";",
							"",
							"pm.environment.set(\"emailAddress\", emailAddress);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{emailAddress}}\",\n    \"password\": \"AAaa1234%\"\n}"
				},
				"url": {
					"raw": "{{urlBestRate}}/auth/signup",
					"host": [
						"{{urlBestRate}}"
					],
					"path": [
						"auth",
						"signup"
					]
				},
				"description": "Request to register new user at api Best Rate"
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1ce00132-82a3-4dac-aefc-e5c71b949770",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.environment.set(\"userTokenBestRate\", jsonData.result.token);",
							"",
							"",
							"pm.test(\"Validate that login status is success\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"Validate the login email address\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.result.user.email).to.eql(pm.environment.get(\"emailAddress\"));",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"email\": \"{{emailAddress}}\",\n\"password\": \"AAaa1234%\"\n}"
				},
				"url": {
					"raw": "{{urlBestRate}}/auth/login",
					"host": [
						"{{urlBestRate}}"
					],
					"path": [
						"auth",
						"login"
					]
				},
				"description": "Example login request at api Best Rate"
			},
			"response": []
		},
		{
			"name": "Gets all resources within the API",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0dd1bbd2-9f2b-42e3-a261-3ae589f9f14b",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							" ",
							"if (contentTypeHeaderExists) {",
							"    tests[\"Content-Type is application/json\"] = ",
							"      responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"}",
							"",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"pm.test(\"Verify url for getting people resources\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).to.eql(\"https://swapi.co/api/people/\");",
							"});",
							"",
							"pm.test(\"Verify url for getting planets resources \", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.planets).to.eql(\"https://swapi.co/api/planets/\");",
							"});",
							"",
							"pm.test(\"Verify url for getting films resources\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.films).to.eql(\"https://swapi.co/api/films/\");",
							"});",
							"",
							"pm.test(\"Verify url for getting species resources\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.species).to.eql(\"https://swapi.co/api/species/\");",
							"});",
							"",
							"pm.test(\"Verify url for getting vehicles resources\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.vehicles).to.eql(\"https://swapi.co/api/vehicles/\");",
							"});",
							"",
							"pm.test(\"Verify url for getting starships resources\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.starships).to.eql(\"https://swapi.co/api/starships/\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "auth",
						"value": "{{userTokenBestRate}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{urlSwapi}}",
					"host": [
						"{{urlSwapi}}"
					]
				},
				"description": "List of all resources within the SWAPI API"
			},
			"response": []
		},
		{
			"name": "Gets all planet resources",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d7862d79-656f-439d-8dcc-c0372925f19a",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							"tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
							" ",
							"if (contentTypeHeaderExists) {",
							"    tests[\"Content-Type is application/json\"] = ",
							"      responseHeaders[\"Content-Type\"].has(\"application/json\");",
							"}",
							"",
							"pm.test(\"Verify the number of created planets\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.count).to.eql(61);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "{{userTokenBestRate}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{urlSwapi}}/planets/",
					"host": [
						"{{urlSwapi}}"
					],
					"path": [
						"planets",
						""
					]
				},
				"description": "Gets planets resources"
			},
			"response": []
		},
		{
			"name": "Get  swagger api info",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "005f04c2-0ee1-4913-a65e-9950793ad805",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"postman.getGlobalVariable(\"userTokenBestRate\")",
							"",
							"",
							"pm.test(\"Verify that version of swagger is 2.0\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.swagger).to.eql(\"2.0\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "7bc2434b-3ccd-469b-83f8-8f3acf1c1656",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "auth",
						"value": "",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://petstore.swagger.io/v2/swagger.json",
					"protocol": "http",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"swagger.json"
					]
				},
				"description": "Get swagger api info"
			},
			"response": []
		},
		{
			"name": "Adding new pet to the store",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fec5e1fc-7b8d-4330-aaf4-93bc620812de",
						"exec": [
							"var random = Math.random().toString(36).substring(2);",
							"var dogName = \"dog\" + \" \" + random;",
							"",
							"pm.environment.set(\"dogName\", dogName);",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8178b4eb-54cf-4548-a619-76ea012340fc",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"//var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Jackie\");",
							"});",
							"",
							"pm.test(\"Verify status of the dog is available\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"available\");",
							"});",
							"",
							"",
							"pm.test(\"Verify the dog name value\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"dogName\"));",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});",
							"",
							"var idNumber = pm.response.json().id",
							"pm.environment.set(\"idNumber\", idNumber);",
							"",
							"",
							"pm.test(\"Verify the new pet ID number\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(idNumber);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 0,\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"Jackie\"\r\n  },\r\n  \"name\": \"{{dogName}}\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}"
				},
				"url": {
					"raw": "http://petstore.swagger.io/v2/pet/",
					"protocol": "http",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet",
						""
					]
				},
				"description": "Adding new pet on swagger api"
			},
			"response": []
		},
		{
			"name": "Update existing pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d12bd173-daf9-4c34-a881-749c38443a69",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"//var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Jackie\" + \" test\");",
							"});",
							"",
							"pm.test(\"Verify status of the dog is available\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(\"available\");",
							"});",
							"",
							"",
							"pm.test(\"Verify the dog name value\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"dogName\"));",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{idNumber}}\",\r\n    \"category\": {\r\n        \"id\": 0,\r\n        \"name\": \"Jackie test\"\r\n    },\r\n    \"name\": \"{{dogName}}\",\r\n    \"photoUrls\": [\r\n        \"string\"\r\n    ],\r\n    \"tags\": [\r\n        {\r\n            \"id\": 0,\r\n            \"name\": \"string\"\r\n        }\r\n    ],\r\n    \"status\": \"available\"\r\n}"
				},
				"url": {
					"raw": "http://petstore.swagger.io/v2/pet/",
					"protocol": "http",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet",
						""
					]
				},
				"description": "Updating existing pet by category name."
			},
			"response": []
		},
		{
			"name": "Deletes the existing pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "92069db6-7a66-4205-821a-b46564eeaa9f",
						"exec": [
							"//tests[\"Status code is 200\"] = responseCode.code === 200;",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://petstore.swagger.io/v2/pet/{{idNumber}}",
					"protocol": "http",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet",
						"{{idNumber}}"
					]
				},
				"description": "Deletes the previously created and edited pet record."
			},
			"response": []
		},
		{
			"name": "Search for deleted pet by IdNumber variable",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ece72e7c-a754-4c18-9aea-c31127644a3f",
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Validate the value of response code\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.code).to.eql(1);",
							"});",
							"",
							"pm.test(\"Validate the type of response message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.type).to.eql(\"error\");",
							"});",
							"",
							"pm.test(\"Validate the text of the response message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Pet not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://petstore.swagger.io/v2/pet/{{idNumber}}",
					"protocol": "http",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet",
						"{{idNumber}}"
					]
				},
				"description": "Search for deleted pet by IdNumber variable"
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}